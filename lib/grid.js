// Generated by CoffeeScript 1.4.0
(function() {
  var Grid;

  Grid = (function() {

    Grid.bytesFrom2DArray = function(width, height, array2d) {
      var buf, byte, byteIndex, col, index, offset, row, x, y, _i, _j, _len, _len1;
      buf = new Buffer(Math.ceil(width * height / 8));
      console.log("len:" + buf.length);
      buf.fill(0);
      for (y = _i = 0, _len = array2d.length; _i < _len; y = ++_i) {
        row = array2d[y];
        for (x = _j = 0, _len1 = row.length; _j < _len1; x = ++_j) {
          col = row[x];
          if (Boolean(col)) {
            index = y * width + x;
            byteIndex = index >>> 3;
            offset = 7 - (index % 8);
            byte = buf[byteIndex];
            byte = byte ^ 1 << offset;
            buf[byteIndex] = byte;
            console.log("walkable at row:" + y + ", col:" + x + ", row:" + row + ", index:" + index + ", offset:" + offset + ", byteIndex:" + byteIndex);
          }
        }
      }
      return buf;
    };

    function Grid(width, height, bytes) {
      this.width = width;
      this.height = height;
      this.bytes = bytes;
      if (!(width > 0 && height > 0 && Buffer.isBuffer(bytes))) {
        throw new Error("bad arguments, width:" + width + ", height:" + height + ", bytes:" + bytes);
      }
      if (bytes.length !== Math.ceil(width * height / 8)) {
        throw new Error("bytes length mismatch, width:" + width + ", height:" + height + ", bytes.length:" + bytes.length);
      }
    }

    Grid.prototype.isWalkableAt = function(x, y) {
      var byte, bytePos, index, offset;
      if (x < 0 || y < 0 || x > this.width || y > this.height) {
        return false;
      }
      index = y * this.width + x;
      bytePos = index >>> 3;
      offset = 7 - index % 8;
      byte = this.bytes[bytePos];
      return Boolean(byte >>> offset & 1);
    };

    Grid.prototype.getNeighbors = function(x, y) {
      var neighbors;
      if (x < 0 || y < 0 || x > this.width || y > this.height) {
        return [];
      }
      neighbors = [];
      return neighbors;
    };

    Grid.prototype.toString = function() {
      var arr, result, x, y, _i, _j, _ref, _ref1;
      result = "[Grid(width=" + this.width + ", height=" + this.height + ")]\nDump: 1=walkable, 0=blocked";
      for (y = _i = 0, _ref = this.height; _i < _ref; y = _i += 1) {
        arr = [];
        for (x = _j = 0, _ref1 = this.width; _j < _ref1; x = _j += 1) {
          arr.push(Number(this.isWalkableAt(x, y)));
        }
        result = result + ("\n" + (arr.join('')));
      }
      return result;
    };

    return Grid;

  })();

  module.exports = Grid;

}).call(this);
